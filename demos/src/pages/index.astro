---
import Layout from "@/layouts/Layout.astro";
import { getMetadata } from "@/utils/get-sketches";

const sketches = import.meta.glob("@/pages/**/_sketch.frag", { query: "?raw" });
const metaImports = import.meta.glob("@/pages/**/_meta.json", {
  query: "?raw",
});
const metadata = await getMetadata(metaImports);

function formatPathSegment(seg?: string) {
  return seg
    ?.split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
}

function formatPaths(paths: string[]) {
  return paths
    .map((path) => {
      const segments = path.split("/");

      const id = segments.at(-2);
      const label = formatPathSegment(id);
      const categoryId = segments.at(-3);
      const categoryLabel = formatPathSegment(categoryId);

      const href = segments.reduce<string>((acc, seg, i) => {
        if (i <= 2 || i === segments.length - 1) {
          return acc;
        }
        return `${acc}/${seg}`;
      }, "");

      const data = metadata[id ?? ""];
      const imgSrc = data?.imgSrc ?? `/sketch-thumbnails/${id}.png`;

      return {
        id,
        href,
        category: { id: categoryId, label: categoryLabel },
        label,
        imgSrc,
      };
    })
    .filter(
      (path) => !path.href.includes("_archive") && !path.id?.startsWith("_")
    );
}

const pages = formatPaths(Object.keys(sketches));

const pagesByCategory = Object.groupBy(
  pages,
  (page) => page.category.id ?? "undefined"
);
---

<Layout>
  <main>
    <section>
      <h1>Shdr<span>.</span></h1>
    </section>
    {
      Object.entries(pagesByCategory).map(([category, pages]) => (
        <section class="demo-section">
          <p class="category">{formatPathSegment(category)}</p>
          <ul>
            {pages?.map((page) => (
              <li>
                <a
                  href={page.href}
                  style="display: flex; align-items: center; gap: 1rem;"
                >
                  <img
                    src={page.imgSrc}
                    style="width: 80px; aspect-ratio: 1/1; border-radius: 0.75rem; vertical-align: bottom;"
                  />
                  {page.label}
                </a>
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </main>
</Layout>

<style>
  main {
    max-width: 640px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  section {
    padding: 1.75rem 0 2.25rem;

    &.demo-section {
      border-top: 1px solid rgb(255 255 255 / 0.15);
    }

    &:first-of-type {
      padding: 2rem 0 1.25rem;
    }
  }

  h1 {
    font-size: 3rem;
    font-weight: 900;

    span {
      margin-left: -0.1em;
    }
  }

  .category {
    font-size: 0.9375rem;
    font-weight: 500;
    opacity: 0.7;
    margin-top: 0;
    margin-bottom: 1.5rem;
  }

  ul {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    column-gap: 1rem;
    row-gap: 1.5rem;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  a {
    font-weight: 700;
    text-decoration: none;
    color: CanvasText;

    &:visited {
      color: CanvasText;
    }

    img {
      outline: 1px solid rgb(255 255 255 / 0.1);
    }
  }

  .nudge {
    margin-left: -0.25ch;
  }
</style>
