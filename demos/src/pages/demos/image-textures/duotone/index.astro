---
import Layout from "@/layouts/Layout.astro";
import CodeDialog from "@/components/code-dialog/index.astro";
import sourceCode from "./_sketch.frag?raw";
---

<script>
  import GlslRenderer from "@glsl-ts";
  import frag from "./_sketch.frag?raw";
  import { createGui } from "@/utils/create-gui";

  const container = document.querySelector("#wrapper") as HTMLElement;
  const uniforms = {
    texture: "/blend-earth.jpg",
    highColor: [0, 0.5, 1],
    lowColor: [0, 0, 0],
  };

  // Initialize static texture
  const gl = new GlslRenderer({ container, frag, uniforms, glVersion: 1 });

  gl.play();

  const guiOptions = {
    highColor: `rgb(${Math.floor(255 * 0)}, ${Math.floor(255 * 0.5)}, ${Math.floor(255 * 1)})`,
    lowColor: `rgb(${Math.floor(255 * 0)}, ${Math.floor(255 * 0)}, ${Math.floor(255 * 0)})`,
  };

  createGui({
    dialogClass: "code-dialog",
    setup: (gui) => {
      gui.addColor(guiOptions, "highColor").onChange((value: string) => {
        gl.updateUniform("highColor", hexToRgb(value));
      });

      gui.addColor(guiOptions, "lowColor").onChange((value: string) => {
        gl.updateUniform("lowColor", hexToRgb(value));
      });
    },
  });

  function hexToRgb(hex: string): [number, number, number] {
    // Remove the hash if it exists
    hex = hex.replace(/^#/, "");

    // Parse different hex formats
    let r: number, g: number, b: number;

    if (hex.length === 3) {
      // Short format #rgb
      r = parseInt(hex[0] + hex[0], 16);
      g = parseInt(hex[1] + hex[1], 16);
      b = parseInt(hex[2] + hex[2], 16);
    } else if (hex.length === 6) {
      // Standard format #rrggbb
      r = parseInt(hex.substring(0, 2), 16);
      g = parseInt(hex.substring(2, 4), 16);
      b = parseInt(hex.substring(4, 6), 16);
    } else {
      // Invalid format
      throw new Error("Invalid hex format");
    }

    // Convert from 0-255 to 0-1 range
    return [r / 255, g / 255, b / 255];
  }
</script>

<Layout>
  <section id="wrapper"></section>
  <CodeDialog class="code-dialog" code={sourceCode} />
</Layout>

<style>
  section {
    height: 100svh;
    touch-action: none;
  }
</style>
