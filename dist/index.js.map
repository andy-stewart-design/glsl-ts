{"version":3,"sources":["../src/utils.ts","../src/glsl-asset-manager.ts","../src/shaders.ts","../src/glsl-canvas.ts","../src/index.ts"],"names":["texture"],"mappings":";AAAA,SAAS,WAAW,MAA2B,EAAA;AAC7C,EAAM,MAAA,EAAA,GAAK,MAAO,CAAA,UAAA,CAAW,OAAO,CAAA;AAEpC,EAAA,IAAI,CAAC,EAAA,EAAU,MAAA,IAAI,MAAM,qBAAqB,CAAA;AAE9C,EAAO,OAAA,EAAA;AACT;AAEA,SAAS,aAAA,CACP,IACA,OACA,EAAA;AACA,EAAA,MAAM,EAAE,UAAA,EAAY,IAAM,EAAA,aAAA,EAAkB,GAAA,EAAA;AAC5C,EAAM,MAAA,KAAA,GAAQ,IAAI,UAAW,CAAA,CAAC,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA;AAE3C,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAG,EAAA,CAAA,UAAA,CAAW,YAAY,CAAG,EAAA,IAAA,EAAM,GAAG,CAAG,EAAA,CAAA,EAAG,IAAM,EAAA,aAAA,EAAe,KAAK,CAAA;AAAA,GACjE,MAAA;AACL,IAAA,EAAA,CAAG,WAAW,EAAG,CAAA,UAAA,EAAY,GAAG,IAAM,EAAA,IAAA,EAAM,eAAe,OAAO,CAAA;AAAA;AAEtE;AAEA,SAAS,gBAAA,CACP,IACA,OACA,EAAA;AACA,EAAA,IAAI,WAAW,OAAQ,CAAA,KAAK,KAAK,UAAW,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAE3D,IAAG,EAAA,CAAA,cAAA,CAAe,GAAG,UAAU,CAAA;AAAA,GAC1B,MAAA;AAEL,IAAA,EAAA,CAAG,cAAc,EAAG,CAAA,UAAA,EAAY,EAAG,CAAA,cAAA,EAAgB,GAAG,aAAa,CAAA;AACnE,IAAA,EAAA,CAAG,cAAc,EAAG,CAAA,UAAA,EAAY,EAAG,CAAA,cAAA,EAAgB,GAAG,aAAa,CAAA;AACnE,IAAA,EAAA,CAAG,cAAc,EAAG,CAAA,UAAA,EAAY,EAAG,CAAA,kBAAA,EAAoB,GAAG,MAAM,CAAA;AAAA;AAEpE;AAGA,SAAS,WAAW,KAAwB,EAAA;AAC1C,EAAA,OAAO,KAAQ,GAAA,CAAA,IAAA,CAAM,KAAS,GAAA,KAAA,GAAQ,CAAQ,MAAA,CAAA;AAChD;;;AC5BA,IAAM,mBAAN,MAAuB;AAAA,EAOrB,WACE,CAAA,EAAA,EACA,OACA,EAAA,eAAA,GAAiC,EACjC,EAAA;AARF,IAAS,IAAA,CAAA,QAAA,uBAAyD,GAAI,EAAA;AACtE,IAAS,IAAA,CAAA,cAAA,uBAAiD,GAAI,EAAA;AAC9D,IAAS,IAAA,CAAA,eAAA,uBAAmD,GAAI,EAAA;AAO9D,IAAA,IAAA,CAAK,EAAK,GAAA,EAAA;AACV,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAEf,IAAA,IAAA,CAAK,yBAA0B,EAAA;AAC/B,IAAA,IAAA,CAAK,yBAAyB,eAAe,CAAA;AAAA;AAC/C,EAEQ,yBAA4B,GAAA;AAClC,IAAA,MAAM,QAAQ,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA;AAC/D,IAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,QAAA,EAAU,KAAK,CAAA;AACjC,IAAA,MAAM,OAAO,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,cAAc,CAAA;AACpE,IAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,cAAA,EAAgB,IAAI,CAAA;AACtC,IAAA,MAAM,SAAS,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,SAAS,CAAA;AACjE,IAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,SAAA,EAAW,MAAM,CAAA;AAAA;AACrC,EAEQ,yBAAyB,QAAyB,EAAA;AACxD,IAAA,KAAA,MAAW,CAAC,IAAM,EAAA,MAAM,KAAK,MAAO,CAAA,OAAA,CAAQ,QAAQ,CAAG,EAAA;AACrD,MAAA,MAAM,WAAW,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA;AAC9D,MAAA,IAAI,CAAC,QAAU,EAAA;AAEf,MAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,IAAA,EAAM,QAAQ,CAAA;AAChC,MAAK,IAAA,CAAA,UAAA,CAAW,MAAM,MAAM,CAAA;AAAA;AAC9B;AACF,EAEQ,cAAiB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,cAAA,CAAe,IAAO,GAAA,IAAA,CAAK,eAAgB,CAAA,IAAA;AAAA;AACzD,EAEQ,mBAAmB,IAAc,EAAA;AACvC,IAAA,MAAM,WAAW,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA;AAC9D,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,MAAM,IAAI,KAAA,CAAM,CAA0C,uCAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AAElE,IAAO,OAAA,QAAA;AAAA;AACT,EAEQ,kBAAkB,IAAc,EAAA;AAEtC,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,kBAAA,CAAmB,IAAI,CAAA;AAC7C,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,EAAA,CAAG,aAAc,EAAA;AACtC,IAAM,MAAA,WAAA,GAAc,KAAK,cAAe,EAAA;AAGxC,IAAK,IAAA,CAAA,EAAA,CAAG,SAAU,CAAA,QAAA,EAAU,WAAW,CAAA;AAGvC,IAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAc,IAAK,CAAA,EAAA,CAAG,WAAW,WAAW,CAAA;AACpD,IAAA,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,IAAK,CAAA,EAAA,CAAG,YAAY,OAAO,CAAA;AAC/C,IAAA,aAAA,CAAc,KAAK,EAAE,CAAA;AAErB,IAAO,OAAA,CAAC,SAAS,WAAW,CAAA;AAAA;AAC9B,EAEQ,iBAAA,CAAkB,MAAc,GAAa,EAAA;AACnD,IAAA,MAAM,CAAC,OAAS,EAAA,WAAW,CAAI,GAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAG1D,IAAK,IAAA,CAAA,cAAA,CAAe,IAAI,IAAM,EAAA,EAAE,OAAO,OAAS,EAAA,IAAA,EAAM,aAAa,CAAA;AAGnE,IAAM,MAAA,KAAA,GAAQ,IAAI,KAAM,EAAA;AACxB,IAAA,KAAA,CAAM,WAAc,GAAA,WAAA;AAEpB,IAAA,KAAA,CAAM,SAAS,MAAM;AACnB,MAAI,IAAA;AACF,QAAA,MAAMA,QAAU,GAAA,IAAA,CAAK,cAAe,CAAA,GAAA,CAAI,IAAI,CAAA;AAC5C,QAAM,MAAA,QAAA,GAAW,GAAG,IAAI,CAAA,KAAA,CAAA;AACxB,QAAA,MAAM,eAAe,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA;AAEtE,QAAA,IAAI,gBAAgBA,QAAS,EAAA;AAC3B,UAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,QAAA,EAAU,YAAY,CAAA;AACxC,UAAA,IAAA,CAAK,GAAG,SAAU,CAAA,YAAA,EAAc,KAAM,CAAA,KAAA,EAAO,MAAM,MAAM,CAAA;AACzD,UAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAc,IAAK,CAAA,EAAA,CAAG,WAAW,WAAW,CAAA;AACpD,UAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,EAAG,CAAA,UAAA,EAAYA,SAAQ,KAAK,CAAA;AACrD,UAAiB,gBAAA,CAAA,IAAA,CAAK,IAAI,KAAK,CAAA;AAC/B,UAAc,aAAA,CAAA,IAAA,CAAK,IAAI,KAAK,CAAA;AAAA;AAC9B,eACO,KAAO,EAAA;AACd,QAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,sBAAA,EAAyB,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AACvD,KACF;AAEA,IAAA,KAAA,CAAM,UAAU,MAAM;AACpB,MAAQ,OAAA,CAAA,KAAA,CAAM,CAA2B,wBAAA,EAAA,GAAG,CAAE,CAAA,CAAA;AAAA,KAChD;AAEA,IAAA,KAAA,CAAM,GAAM,GAAA,GAAA;AAAA;AACd,EAEA,MAAa,kBAAmB,CAAA,IAAA,EAAc,GAAc,EAAA;AAC1D,IAAM,MAAA,KAAA,GAAQ,QAAS,CAAA,aAAA,CAAc,OAAO,CAAA;AAC5C,IAAA,KAAA,CAAM,KAAQ,GAAA,IAAA;AAEd,IAAM,KAAA,CAAA,gBAAA,CAAiB,cAAc,MAAM;AACzC,MAAA,MAAM,CAAC,OAAS,EAAA,WAAW,CAAI,GAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAG1D,MAAK,IAAA,CAAA,eAAA,CAAgB,IAAI,IAAM,EAAA;AAAA,QAC7B,KAAA;AAAA,QACA,KAAO,EAAA,OAAA;AAAA,QACP,IAAM,EAAA;AAAA,OACP,CAAA;AAED,MAAA,KAAA,CAAM,IAAK,EAAA;AAEX,MAAI,IAAA;AACF,QAAA,MAAMA,QAAU,GAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAI,IAAI,CAAA;AAC7C,QAAM,MAAA,QAAA,GAAW,GAAG,IAAI,CAAA,KAAA,CAAA;AACxB,QAAA,MAAM,eAAe,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA;AAEtE,QAAA,IAAI,gBAAgBA,QAAS,EAAA;AAC3B,UAAK,IAAA,CAAA,QAAA,CAAS,GAAI,CAAA,QAAA,EAAU,YAAY,CAAA;AACxC,UAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,YAAc,EAAA,GAAA,EAAK,GAAG,CAAA;AACxC,UAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAc,IAAK,CAAA,EAAA,CAAG,WAAW,WAAW,CAAA;AACpD,UAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,EAAG,CAAA,UAAA,EAAYA,SAAQ,KAAK,CAAA;AACrD,UAAiB,gBAAA,CAAA,IAAA,CAAK,IAAI,KAAK,CAAA;AAC/B,UAAc,aAAA,CAAA,IAAA,CAAK,IAAI,KAAK,CAAA;AAAA;AAC9B,eACO,KAAO,EAAA;AACd,QAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,sBAAA,EAAyB,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AACvD,KACD,CAAA;AAED,IAAA,IAAI,CAAC,GAAK,EAAA;AACR,MAAM,MAAA,MAAA,GAAS,MAAM,SAAU,CAAA,YAAA,CAAa,aAAa,EAAE,KAAA,EAAO,MAAM,CAAA;AACxE,MAAA,KAAA,CAAM,QAAW,GAAA,IAAA;AACjB,MAAA,KAAA,CAAM,SAAY,GAAA,MAAA;AAAA,KACb,MAAA;AACL,MAAA,KAAA,CAAM,IAAO,GAAA,IAAA;AACb,MAAA,KAAA,CAAM,WAAc,GAAA,WAAA;AACpB,MAAA,KAAA,CAAM,GAAM,GAAA,GAAA;AAAA;AACd;AACF,EAEO,qBAAwB,GAAA;AAC7B,IAAA,KAAA,MAAW,WAAW,KAAM,CAAA,IAAA,CAAK,KAAK,eAAgB,CAAA,MAAA,EAAQ,CAAG,EAAA;AAC/D,MAAA,IAAA,CAAK,GAAG,aAAc,CAAA,IAAA,CAAK,EAAG,CAAA,QAAA,GAAW,QAAQ,IAAI,CAAA;AACrD,MAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,EAAG,CAAA,UAAA,EAAY,QAAQ,KAAK,CAAA;AACrD,MAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,QACN,KAAK,EAAG,CAAA,UAAA;AAAA,QACR,CAAA;AAAA,QACA,KAAK,EAAG,CAAA,IAAA;AAAA,QACR,KAAK,EAAG,CAAA,IAAA;AAAA,QACR,KAAK,EAAG,CAAA,aAAA;AAAA,QACR,OAAQ,CAAA;AAAA,OACV;AAAA;AACF;AACF,EAEO,UAAA,CAAW,MAAc,MAAsB,EAAA;AACpD,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI,IAAI,CAAA;AAEvC,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAQ,OAAA,CAAA,IAAA,CAAK,CAAW,QAAA,EAAA,IAAI,CAAY,UAAA,CAAA,CAAA;AACxC,MAAA;AAAA;AAGF,IAAA,QAAQ,OAAO,IAAM;AAAA,MACnB,KAAK,OAAA;AACH,QAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,QAAU,EAAA,MAAA,CAAO,KAAK,CAAA;AACxC,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,QAAU,EAAA,MAAA,CAAO,KAAK,CAAA;AACzC,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,QAAU,EAAA,MAAA,CAAO,KAAK,CAAA;AACzC,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,QAAU,EAAA,MAAA,CAAO,KAAK,CAAA;AACzC,QAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,QAAU,EAAA,MAAA,CAAO,KAAK,CAAA;AACxC,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,GAAG,SAAU,CAAA,QAAA,EAAU,MAAO,CAAA,KAAA,GAAQ,IAAI,CAAC,CAAA;AAChD,QAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAK,IAAA,CAAA,iBAAA,CAAkB,IAAM,EAAA,MAAA,CAAO,KAAK,CAAA;AACzC,QAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAK,IAAA,CAAA,kBAAA,CAAmB,IAAM,EAAA,MAAA,CAAO,KAAK,CAAA;AAC1C,QAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAA,IAAA,CAAK,mBAAmB,IAAI,CAAA;AAC5B,QAAA;AAAA,MACF;AACE,QAAQ,OAAA,CAAA,IAAA,CAAK,CAAgC,6BAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AACvD;AACF,EAEO,OAAU,GAAA;AACf,IAAK,IAAA,CAAA,cAAA,CAAe,QAAQ,CAAC,IAAA,KAAS,KAAK,EAAG,CAAA,aAAA,CAAc,IAAK,CAAA,KAAK,CAAC,CAAA;AACvE,IAAA,IAAA,CAAK,eAAe,KAAM,EAAA;AAC1B,IAAA,KAAA,MAAW,WAAW,KAAM,CAAA,IAAA,CAAK,KAAK,eAAgB,CAAA,MAAA,EAAQ,CAAG,EAAA;AAC/D,MAAM,MAAA,GAAA,GAAM,QAAQ,KAAM,CAAA,SAAA;AAC1B,MAAA,IAAI,eAAe,WAAa,EAAA;AAC9B,QAAA,GAAA,CAAI,WAAY,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA,KAAA,CAAM,MAAM,CAAA;AAAA,OAC1C,MAAA;AACL,QAAA,OAAA,CAAQ,MAAM,SAAY,GAAA,IAAA;AAAA;AAC5B;AAEF,IAAA,IAAA,CAAK,gBAAgB,KAAM,EAAA;AAAA;AAE/B,CAAA;AAEA,IAAO,0BAAQ,GAAA,gBAAA;;;ACvOf,IAAM,kBAAqB,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAO3B,IAAM,oBAAuB,GAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;;;ACJ7B,IAAM,gBAAA,GAAmB,IAAI,YAAa,CAAA;AAAA,EACxC,EAAA;AAAA,EAAI,EAAA;AAAA,EAAI,CAAA;AAAA,EAAG,EAAA;AAAA,EAAI,EAAA;AAAA,EAAI,CAAA;AAAA,EAAG,EAAA;AAAA,EAAI,CAAA;AAAA,EAAG,CAAA;AAAA,EAAG,EAAA;AAAA,EAAI,CAAA;AAAA,EAAG;AACzC,CAAC,CAAA;AAED,IAAM,aAAN,MAAiB;AAAA,EAMf,WAAA,CAAY,WAAwB,IAAe,EAAA;AACjD,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AACjB,IAAK,IAAA,CAAA,MAAA,GAAS,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA;AAC7C,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,OAAU,GAAA,OAAA;AAC5B,IAAK,IAAA,CAAA,SAAA,CAAU,WAAY,CAAA,IAAA,CAAK,MAAM,CAAA;AAEtC,IAAK,IAAA,CAAA,EAAA,GAAK,UAAW,CAAA,IAAA,CAAK,MAAM,CAAA;AAEhC,IAAA,MAAM,eAAe,IAAK,CAAA,aAAA;AAAA,MACxB,KAAK,EAAG,CAAA,aAAA;AAAA,MACR;AAAA,KACF;AAEA,IAAA,MAAM,iBAAiB,IAAK,CAAA,aAAA;AAAA,MAC1B,KAAK,EAAG,CAAA,eAAA;AAAA,MACR,IAAQ,IAAA;AAAA,KACV;AAEA,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,aAAc,CAAA,YAAA,EAAc,cAAc,CAAA;AAC9D,IAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,IAAA,CAAK,OAAO,CAAA;AAC/B,IAAA,IAAA,CAAK,aAAa,gBAAgB,CAAA;AAElC,IAAA,MAAM,aAAa,IAAK,CAAA,EAAA,CAAG,iBAAkB,CAAA,IAAA,CAAK,SAAS,YAAY,CAAA;AACvE,IAAK,IAAA,CAAA,EAAA,CAAG,wBAAwB,UAAU,CAAA;AAC1C,IAAK,IAAA,CAAA,EAAA,CAAG,oBAAoB,UAAY,EAAA,CAAA,EAAG,KAAK,EAAG,CAAA,KAAA,EAAO,KAAO,EAAA,CAAA,EAAG,CAAC,CAAA;AAAA;AACvE,EAEQ,aAAA,CAAc,MAAc,MAAgB,EAAA;AAClD,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,IAAI,CAAA;AACxC,IAAA,IAAI,CAAC,MAAA,EAAc,MAAA,IAAI,MAAM,wBAAwB,CAAA;AAErD,IAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,MAAA,EAAQ,MAAM,CAAA;AACnC,IAAK,IAAA,CAAA,EAAA,CAAG,cAAc,MAAM,CAAA;AAE5B,IAAI,IAAA,CAAC,KAAK,EAAG,CAAA,kBAAA,CAAmB,QAAQ,IAAK,CAAA,EAAA,CAAG,cAAc,CAAG,EAAA;AAC/D,MAAK,IAAA,CAAA,EAAA,CAAG,aAAa,MAAM,CAAA;AAC3B,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAA6B,0BAAA,EAAA,IAAA,CAAK,EAAG,CAAA,gBAAA,CAAiB,MAAM,CAAC,CAAA;AAAA,OAC/D;AAAA;AAGF,IAAO,OAAA,MAAA;AAAA;AACT,EAEQ,aAAA,CACN,cACA,cACA,EAAA;AACA,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,EAAA,CAAG,aAAc,EAAA;AACtC,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAM,MAAA,IAAI,MAAM,CAA8B,4BAAA,CAAA,CAAA;AAAA;AAEhD,IAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,OAAA,EAAS,YAAY,CAAA;AAC1C,IAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,OAAA,EAAS,cAAc,CAAA;AAC5C,IAAK,IAAA,CAAA,EAAA,CAAG,YAAY,OAAO,CAAA;AAC3B,IAAI,IAAA,CAAC,KAAK,EAAG,CAAA,mBAAA,CAAoB,SAAS,IAAK,CAAA,EAAA,CAAG,WAAW,CAAG,EAAA;AAC9D,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAA0B,uBAAA,EAAA,IAAA,CAAK,EAAG,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA;AAAA,OAC9D;AAAA;AAEF,IAAO,OAAA,OAAA;AAAA;AACT,EAEQ,aAAa,IAAoB,EAAA;AACvC,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,EAAA,CAAG,YAAa,EAAA;AACpC,IAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,IAAK,CAAA,EAAA,CAAG,cAAc,MAAM,CAAA;AAC/C,IAAK,IAAA,CAAA,EAAA,CAAG,WAAW,IAAK,CAAA,EAAA,CAAG,cAAc,IAAM,EAAA,IAAA,CAAK,GAAG,WAAW,CAAA;AAClE,IAAO,OAAA,MAAA;AAAA;AACT,EAEO,YAAe,GAAA;AACpB,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,SAAA,CAAU,qBAAsB,EAAA;AAClD,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,KAAA;AACzB,IAAK,IAAA,CAAA,MAAA,CAAO,SAAS,IAAK,CAAA,MAAA;AAAA;AAC5B,EAEO,OAAU,GAAA;AACf,IAAA,IAAA,CAAK,UAAU,SAAY,GAAA,EAAA;AAAA;AAE/B,CAAA;AAEA,IAAO,mBAAQ,GAAA,UAAA;;;AC1FM,IAAA,YAAA,GAArB,cAA0C,mBAAW,CAAA;AAAA,EAMnD,WACE,CAAA,SAAA,EACA,IACA,EAAA,eAAA,GAAiC,EACjC,EAAA;AACA,IAAA,KAAA,CAAM,WAAW,IAAI,CAAA;AAVvB,IAAQ,IAAA,CAAA,aAAA,GAAgB,CAAC,CAAA,EAAG,CAAC,CAAA;AAE7B,IAAQ,IAAA,CAAA,UAAA,GAAa,IAAI,eAAgB,EAAA;AACzC,IAAA,IAAA,CAAQ,KAAuB,GAAA,IAAA;AAQ7B,IAAA,IAAA,CAAK,SAAS,IAAI,0BAAA,CAAiB,KAAK,EAAI,EAAA,IAAA,CAAK,SAAS,eAAe,CAAA;AAEzE,IAAA,IAAA,CAAK,YAAa,EAAA;AAClB,IAAA,IAAA,CAAK,iBAAkB,EAAA;AAAA;AACzB,EAEQ,OAAO,IAAc,EAAA;AAC3B,IAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA;AAC7B,IAAA,IAAA,CAAK,EAAG,CAAA,KAAA,CAAM,IAAK,CAAA,EAAA,CAAG,gBAAgB,CAAA;AAGtC,IAAA,MAAM,QAAQ,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,GAAA,CAAI,QAAQ,CAAK,IAAA,IAAA;AACpD,IAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,GAAO,IAAK,CAAA;AACrC,IAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,GAAA,CAAI,SAAS,CAAK,IAAA,IAAA;AACtD,IAAK,IAAA,CAAA,EAAA,CAAG,SAAU,CAAA,MAAA,EAAQ,IAAK,CAAA,aAAA,CAAc,CAAC,CAAG,EAAA,IAAA,CAAK,aAAc,CAAA,CAAC,CAAC,CAAA;AAGtE,IAAA,IAAA,CAAK,OAAO,qBAAsB,EAAA;AAGlC,IAAK,IAAA,CAAA,EAAA,CAAG,WAAW,IAAK,CAAA,EAAA,CAAG,WAAW,CAAG,EAAA,gBAAA,CAAiB,SAAS,CAAC,CAAA;AAEpE,IAAA,qBAAA,CAAsB,CAAC,CAAA,KAAM,IAAK,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA;AAC7C,EAEQ,YAAe,GAAA;AACrB,IAAA,KAAA,CAAM,YAAa,EAAA;AAEnB,IAAA,MAAM,OAAO,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,GAAA,CAAI,cAAc,CAAK,IAAA,IAAA;AACzD,IAAK,IAAA,CAAA,EAAA,CAAG,SAAS,CAAG,EAAA,CAAA,EAAG,KAAK,MAAO,CAAA,KAAA,EAAO,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA;AAC5D,IAAK,IAAA,CAAA,EAAA,CAAG,UAAU,IAAM,EAAA,IAAA,CAAK,OAAO,KAAO,EAAA,IAAA,CAAK,OAAO,MAAM,CAAA;AAAA;AAC/D,EAEQ,iBAAoB,GAAA;AAC1B,IAAM,MAAA,EAAE,MAAO,EAAA,GAAI,IAAK,CAAA,UAAA;AAExB,IAAA,IAAA,CAAK,MAAO,CAAA,gBAAA;AAAA,MACV,WAAA;AAAA,MACA,CAAC,KAAU,KAAA;AACT,QAAM,MAAA,IAAA,GAAO,IAAK,CAAA,MAAA,CAAO,qBAAsB,EAAA;AAC/C,QAAA,IAAA,CAAK,aAAc,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,UAAU,IAAK,CAAA,IAAA;AAC7C,QAAA,IAAA,CAAK,cAAc,CAAC,CAAA,GAAI,KAAK,MAAU,IAAA,KAAA,CAAM,UAAU,IAAK,CAAA,GAAA,CAAA;AAAA,OAC9D;AAAA,MACA,EAAE,MAAO;AAAA,KACX;AAEA,IAAO,MAAA,CAAA,gBAAA,CAAiB,UAAU,MAAM,IAAA,CAAK,cAAgB,EAAA,EAAE,QAAQ,CAAA;AAAA;AACzE,EAEO,IAAO,GAAA;AACZ,IAAA,IAAA,CAAK,QAAQ,qBAAsB,CAAA,CAAC,MAAM,IAAK,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA;AAC1D,EAEO,KAAQ,GAAA;AACb,IAAI,IAAA,OAAO,IAAK,CAAA,KAAA,KAAU,QAAU,EAAA;AAClC,MAAA,oBAAA,CAAqB,KAAK,KAAK,CAAA;AAC/B,MAAA,IAAA,CAAK,KAAQ,GAAA,IAAA;AAAA;AACf;AACF,EAEO,aAAA,CAAc,MAAc,MAAsB,EAAA;AACvD,IAAK,IAAA,CAAA,MAAA,CAAO,UAAW,CAAA,IAAA,EAAM,MAAM,CAAA;AAAA;AACrC,EAEO,OAAU,GAAA;AACf,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAA,IAAA,CAAK,OAAO,OAAQ,EAAA;AACpB,IAAA,IAAA,CAAK,WAAW,KAAM,EAAA;AAAA;AAE1B","file":"index.js","sourcesContent":["function getContext(canvas: HTMLCanvasElement) {\n  const gl = canvas.getContext(\"webgl\");\n\n  if (!gl) throw new Error(\"WebGL not supported\");\n\n  return gl;\n}\n\nfunction updateTexture(\n  gl: WebGLRenderingContext,\n  texture?: HTMLImageElement | HTMLVideoElement\n) {\n  const { TEXTURE_2D, RGBA, UNSIGNED_BYTE } = gl;\n  const pixel = new Uint8Array([0, 0, 0, 255]);\n\n  if (!texture) {\n    gl.texImage2D(TEXTURE_2D, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, pixel);\n  } else {\n    gl.texImage2D(gl.TEXTURE_2D, 0, RGBA, RGBA, UNSIGNED_BYTE, texture);\n  }\n}\n\nfunction setTextureParams(\n  gl: WebGLRenderingContext,\n  texture: HTMLImageElement | HTMLVideoElement\n) {\n  if (isPowerOf2(texture.width) && isPowerOf2(texture.height)) {\n    // Set parameters for power-of-2 textures\n    gl.generateMipmap(gl.TEXTURE_2D);\n  } else {\n    // Set parameters for non-power-of-2 textures\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  }\n}\n\n// Helper function to check if a number is a power of 2\nfunction isPowerOf2(value: number): boolean {\n  return value > 0 && (value & (value - 1)) === 0;\n}\n\nexport { getContext, updateTexture, setTextureParams };\n","import { setTextureParams, updateTexture } from \"./utils\";\nimport type { UniformConfig, UniformValue } from \"./types\";\n\ninterface StaticTexture {\n  asset: WebGLTexture;\n  unit: number;\n}\n\ninterface DynamicTexture extends StaticTexture {\n  video: HTMLVideoElement;\n}\n\nclass GlslAssetManager {\n  readonly gl: WebGLRenderingContext;\n  readonly program: WebGLProgram;\n  readonly uniforms: Map<string, WebGLUniformLocation | null> = new Map();\n  readonly staticTextures: Map<string, StaticTexture> = new Map();\n  readonly dynamicTextures: Map<string, DynamicTexture> = new Map();\n\n  constructor(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    initialUniforms: UniformConfig = {}\n  ) {\n    this.gl = gl;\n    this.program = program;\n\n    this.initializeDefaultUniforms();\n    this.initializeCustomUniforms(initialUniforms);\n  }\n\n  private initializeDefaultUniforms() {\n    const uTime = this.gl.getUniformLocation(this.program, \"u_time\");\n    this.uniforms.set(\"u_time\", uTime);\n    const uRes = this.gl.getUniformLocation(this.program, \"u_resolution\");\n    this.uniforms.set(\"u_resolution\", uRes);\n    const uMouse = this.gl.getUniformLocation(this.program, \"u_mouse\");\n    this.uniforms.set(\"u_mouse\", uMouse);\n  }\n\n  private initializeCustomUniforms(uniforms: UniformConfig) {\n    for (const [name, config] of Object.entries(uniforms)) {\n      const location = this.gl.getUniformLocation(this.program, name);\n      if (!location) continue;\n\n      this.uniforms.set(name, location);\n      this.setUniform(name, config);\n    }\n  }\n\n  private getTextureUnit() {\n    return this.staticTextures.size + this.dynamicTextures.size;\n  }\n\n  private getUniformLocation(name: string) {\n    const location = this.gl.getUniformLocation(this.program, name);\n    if (!location) {\n      throw new Error(`Failed to retrieve unform loaction for ${name}`);\n    }\n    return location;\n  }\n\n  private initializeTexture(name: string) {\n    // Create a new texture\n    const location = this.getUniformLocation(name);\n    const texture = this.gl.createTexture();\n    const textureUnit = this.getTextureUnit();\n\n    // Set the sampler uniform to use the correct texture unit\n    this.gl.uniform1i(location, textureUnit);\n\n    // Use a placeholder pixel while the image loads\n    this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    updateTexture(this.gl);\n\n    return [texture, textureUnit] as const;\n  }\n\n  private loadStaticTexture(name: string, url: string) {\n    const [texture, textureUnit] = this.initializeTexture(name);\n\n    // Track the texture\n    this.staticTextures.set(name, { asset: texture, unit: textureUnit });\n\n    // Load the image\n    const image = new Image();\n    image.crossOrigin = \"anonymous\";\n\n    image.onload = () => {\n      try {\n        const texture = this.staticTextures.get(name);\n        const sizeName = `${name}_size`;\n        const sizeLocation = this.gl.getUniformLocation(this.program, sizeName);\n\n        if (sizeLocation && texture) {\n          this.uniforms.set(sizeName, sizeLocation);\n          this.gl.uniform2f(sizeLocation, image.width, image.height);\n          this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\n          this.gl.bindTexture(this.gl.TEXTURE_2D, texture.asset);\n          setTextureParams(this.gl, image);\n          updateTexture(this.gl, image);\n        }\n      } catch (error) {\n        console.error(`Error loading texture ${name}:`, error);\n      }\n    };\n\n    image.onerror = () => {\n      console.error(`Failed to load texture: ${url}`);\n    };\n\n    image.src = url;\n  }\n\n  public async loadDynamicTexture(name: string, url?: string) {\n    const video = document.createElement(\"video\");\n    video.muted = true;\n\n    video.addEventListener(\"loadeddata\", () => {\n      const [texture, textureUnit] = this.initializeTexture(name);\n\n      // Track the texture\n      this.dynamicTextures.set(name, {\n        video,\n        asset: texture,\n        unit: textureUnit,\n      });\n\n      video.play();\n\n      try {\n        const texture = this.dynamicTextures.get(name);\n        const sizeName = `${name}_size`;\n        const sizeLocation = this.gl.getUniformLocation(this.program, sizeName);\n\n        if (sizeLocation && texture) {\n          this.uniforms.set(sizeName, sizeLocation);\n          this.gl.uniform2f(sizeLocation, 640, 480);\n          this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\n          this.gl.bindTexture(this.gl.TEXTURE_2D, texture.asset);\n          setTextureParams(this.gl, video);\n          updateTexture(this.gl, video);\n        }\n      } catch (error) {\n        console.error(`Error loading texture ${name}:`, error);\n      }\n    });\n\n    if (!url) {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      video.autoplay = true;\n      video.srcObject = stream;\n    } else {\n      video.loop = true;\n      video.crossOrigin = \"anonymous\";\n      video.src = url;\n    }\n  }\n\n  public renderDynamicTextures() {\n    for (const texture of Array.from(this.dynamicTextures.values())) {\n      this.gl.activeTexture(this.gl.TEXTURE0 + texture.unit);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, texture.asset);\n      this.gl.texImage2D(\n        this.gl.TEXTURE_2D,\n        0,\n        this.gl.RGBA,\n        this.gl.RGBA,\n        this.gl.UNSIGNED_BYTE,\n        texture.video\n      );\n    }\n  }\n\n  public setUniform(name: string, config: UniformValue) {\n    const location = this.uniforms.get(name);\n\n    if (!location) {\n      console.warn(`Uniform ${name} not found`);\n      return;\n    }\n\n    switch (config.type) {\n      case \"float\":\n        this.gl.uniform1f(location, config.value);\n        break;\n      case \"vec2\":\n        this.gl.uniform2fv(location, config.value);\n        break;\n      case \"vec3\":\n        this.gl.uniform3fv(location, config.value);\n        break;\n      case \"vec4\":\n        this.gl.uniform4fv(location, config.value);\n        break;\n      case \"int\":\n        this.gl.uniform1i(location, config.value);\n        break;\n      case \"bool\":\n        this.gl.uniform1i(location, config.value ? 1 : 0);\n        break;\n      case \"image\":\n        this.loadStaticTexture(name, config.value);\n        break;\n      case \"video\":\n        this.loadDynamicTexture(name, config.value);\n        break;\n      case \"webcam\":\n        this.loadDynamicTexture(name);\n        break;\n      default:\n        console.warn(`Unsupported uniform type for ${name}`);\n    }\n  }\n\n  public destroy() {\n    this.staticTextures.forEach((txtr) => this.gl.deleteTexture(txtr.asset));\n    this.staticTextures.clear();\n    for (const texture of Array.from(this.dynamicTextures.values())) {\n      const src = texture.video.srcObject;\n      if (src instanceof MediaStream) {\n        src.getTracks().forEach((track) => track.stop());\n      } else {\n        texture.video.srcObject = null;\n      }\n    }\n    this.dynamicTextures.clear();\n  }\n}\n\nexport default GlslAssetManager;\n","const vertexShaderSource = `\n    attribute vec2 a_position;\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n    }\n  `;\n\nconst fragmentShaderSource = `\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n\n    uniform float u_time;\n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse;\n\n    void main() {\n      vec2 st = gl_FragCoord.xy / u_resolution;\n      vec2 mouse = u_mouse / u_resolution;\n\n      // Distance from the mouse\n      float dist = distance(st, mouse);\n      \n      // Color based on time and distance\n      vec3 color = vec3(0.5 + 0.5 * cos(u_time + dist * 10.0), dist, st.x);\n      gl_FragColor = vec4(color, 1.0);\n    }\n  `;\n\nexport { vertexShaderSource, fragmentShaderSource };\n","import { getContext } from \"./utils\";\nimport { fragmentShaderSource, vertexShaderSource } from \"./shaders\";\n\nconst DEFAULT_VERTICES = new Float32Array([\n  -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1,\n]);\n\nclass GlslCanvas {\n  readonly container: HTMLElement;\n  readonly canvas: HTMLCanvasElement;\n  readonly gl: WebGLRenderingContext;\n  readonly program: WebGLProgram;\n\n  constructor(container: HTMLElement, frag?: string) {\n    this.container = container;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.style.display = \"block\";\n    this.container.appendChild(this.canvas);\n\n    this.gl = getContext(this.canvas);\n\n    const vertexShader = this.compileShader(\n      this.gl.VERTEX_SHADER,\n      vertexShaderSource\n    );\n\n    const fragmentShader = this.compileShader(\n      this.gl.FRAGMENT_SHADER,\n      frag ?? fragmentShaderSource\n    );\n\n    this.program = this.createProgram(vertexShader, fragmentShader);\n    this.gl.useProgram(this.program);\n    this.createBuffer(DEFAULT_VERTICES);\n\n    const a_Position = this.gl.getAttribLocation(this.program, \"a_position\");\n    this.gl.enableVertexAttribArray(a_Position);\n    this.gl.vertexAttribPointer(a_Position, 2, this.gl.FLOAT, false, 0, 0);\n  }\n\n  private compileShader(type: number, source: string) {\n    const shader = this.gl.createShader(type);\n    if (!shader) throw new Error(\"Shader creation failed\");\n\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      this.gl.deleteShader(shader);\n      throw new Error(\n        `Shader compilation error: ${this.gl.getShaderInfoLog(shader)}`\n      );\n    }\n\n    return shader;\n  }\n\n  private createProgram(\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n  ) {\n    const program = this.gl.createProgram();\n    if (!program) {\n      throw new Error(`Error creating WebGL Program`);\n    }\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program);\n    if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      throw new Error(\n        `Program linking error: ${this.gl.getProgramInfoLog(program)}`\n      );\n    }\n    return program;\n  }\n\n  private createBuffer(data: Float32Array) {\n    const buffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, data, this.gl.STATIC_DRAW);\n    return buffer;\n  }\n\n  public resizeCanvas() {\n    const rect = this.container.getBoundingClientRect();\n    this.canvas.width = rect.width;\n    this.canvas.height = rect.height;\n  }\n\n  public destroy() {\n    this.container.innerHTML = \"\";\n  }\n}\n\nexport default GlslCanvas;\nexport { DEFAULT_VERTICES };\n","import GlslAssetManager from \"./glsl-asset-manager\";\nimport GlslCanvas, { DEFAULT_VERTICES } from \"./glsl-canvas\";\nimport type { UniformConfig, UniformValue } from \"./types\";\n\nexport default class GlslRenderer extends GlslCanvas {\n  private mousePosition = [0, 0];\n  readonly assets: GlslAssetManager;\n  private controller = new AbortController();\n  private rafId: number | null = null;\n\n  constructor(\n    container: HTMLElement,\n    frag?: string,\n    initialUniforms: UniformConfig = {}\n  ) {\n    super(container, frag);\n    this.assets = new GlslAssetManager(this.gl, this.program, initialUniforms);\n\n    this.handleResize();\n    this.addEventListeners();\n  }\n\n  private render(time: number) {\n    this.gl.clearColor(0, 0, 0, 1);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    // Pass uniforms\n    const uTime = this.assets.uniforms.get(\"u_time\") ?? null;\n    this.gl.uniform1f(uTime, time * 0.001); // Time in seconds\n    const uMouse = this.assets.uniforms.get(\"u_mouse\") ?? null;\n    this.gl.uniform2f(uMouse, this.mousePosition[0], this.mousePosition[1]);\n\n    // render dynamic textures\n    this.assets.renderDynamicTextures();\n\n    // Draw\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, DEFAULT_VERTICES.length / 2);\n\n    requestAnimationFrame((t) => this.render(t));\n  }\n\n  private handleResize() {\n    super.resizeCanvas();\n\n    const uRes = this.assets.uniforms.get(\"u_resolution\") ?? null;\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n    this.gl.uniform2f(uRes, this.canvas.width, this.canvas.height);\n  }\n\n  private addEventListeners() {\n    const { signal } = this.controller;\n\n    this.canvas.addEventListener(\n      \"mousemove\",\n      (event) => {\n        const rect = this.canvas.getBoundingClientRect();\n        this.mousePosition[0] = event.clientX - rect.left;\n        this.mousePosition[1] = rect.height - (event.clientY - rect.top); // Flip Y-axis\n      },\n      { signal }\n    );\n\n    window.addEventListener(\"resize\", () => this.handleResize(), { signal });\n  }\n\n  public play() {\n    this.rafId = requestAnimationFrame((t) => this.render(t));\n  }\n\n  public pause() {\n    if (typeof this.rafId === \"number\") {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n\n  public updateUniform(name: string, config: UniformValue) {\n    this.assets.setUniform(name, config);\n  }\n\n  public destroy() {\n    super.destroy();\n    this.assets.destroy();\n    this.controller.abort();\n  }\n}\n"]}